name: Build

on:
  workflow_dispatch:
    inputs:
      ref:
        type: string
        default: main
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows, macos, linux]

    runs-on: ${{ matrix.os == 'windows' && 'windows-latest' || 'ubuntu-latest' }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          path: llvm-project
          ref: ${{ github.event.inputs.ref }}

      - name: Prep
        shell: bash
        run: |
          mkdir llvm-project/build
          if [ "${{ matrix.os }}" == "windows" ]; then
            choco install ninja -y
          else
            sudo apt-get update
            sudo apt-get install -y ninja-build
          fi

      - name: Configure and Build
        shell: bash
        working-directory: llvm-project/build
        run: |
          if [ "${{ matrix.os }}" == "macos" ]; then
            cmake -G Ninja \
                -DCMAKE_BUILD_TYPE=MinSizeRel \
                -DLLVM_ENABLE_PROJECTS=clang \
                -DLLVM_TARGET_ARCH=x86_64 \
                -DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-apple-darwin \
                -DCMAKE_OSX_ARCHITECTURES=x86_64 \
                ../llvm
          else
            cmake -G Ninja \
                -DCMAKE_BUILD_TYPE=MinSizeRel \
                -DLLVM_BUILD_STATIC=true \
                -DLLVM_ENABLE_ZLIB=no \
                -DLLVM_ENABLE_PROJECTS=clang \
                ../llvm
          fi
          ninja clang-format

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: clang-format-${{ github.event.inputs.ref }}-${{ matrix.os }}
          path: ${{ matrix.os == 'windows' && 'llvm-project/build/bin/clang-format.exe' || 'llvm-project/build/bin/clang-format' }}
